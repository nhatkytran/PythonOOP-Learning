1. Objects and Classes
+++ Objects +++ --> a container
--> contains data          --> state    --> attributes
--> contains functionality --> behavior --> methods
+++ Classes +++ --> objects --> contains data & functionality
--> Classes have behavior --> Callable --> Instances
--> type of Class is type, type of Instance is Class --> Class is a type
--> Classes have built-in attributes

2. Class Attributes --> __dict__ --> mappingproxy
--> getattr(class, attr_name, default) --> class.attr_name
--> setattr(class, attr_name, attr_value) --> class.attr_name = attr_value
--> delattr(class, attr_name) --> del class.attr_name
--> __name__ not stored in __dict__

3. Callable Class Attributes
--> class.hello()

4. Classes are Callables
--> instance = class()
--> user type(instance) instead of instance.__class__
--> __class__ = str
--> type(instance) --> class
--> instance.__class__ --> str
--> isinstance(instance, class) --> True
--> isinstance(instance, str) --> True
--> Do not mess with __class__

5. Data Attributes
--> class attributes & instance attributes
--> instance.__dict__ --> class.__dict__
--> class.__dict__ --> mappingproxy --> immutable
--> instance.__dict__ --> dict --> mutable

6. Function Attributes
--> class --> function
--> instance --> method
--> method --> instance + function
--> method --> __self__ & __func__
--> object.method(args) --> method.__func__(method.__self__, args)
--> Monkey Patching --> Just means basically modifying the attributes \
of a class or an object at runtime when the program is running
--> Monkey patch function for a class --> method to instances of a class
--> Monkey patch funciton for an instance --> function of that instance

7. Initializing Class Instances
--> Instantiate a class --> Creation phase & Initialization phase

8. Creating Attributes at Run-Time
--> Monkey patch function for a class --> method to instances of a class
--> Monkey patch function for an instance --> function of that instance
--> Monkey patch function for an instance and function becomes method of that instance \
--> from types import MethodType --> MethodType(function, object)

9. Properties
< property > = property(fget=< getter >, fset=< setter >)
--> fget, fset, fdel, doc,...
--> property is a class (type)
--> In Python, we don't start with properties right off the bat. \
We start with bare attributes and in case when we need, \
we will use properties
--> Interface --> The way a piece of code interact with another piece of code \
through functions, methods, etc.
